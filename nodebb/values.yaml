# Default values for nodebb.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: mikaxii/nodebb
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 4567

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  path: /
  hosts:
    - chart-example.local
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

env: 
  nodebburl: http://localhost
  nodebbPort: 4567
  nodebbSecret: asupersecret
  nodebbPluginList: # List separate by comma
  nodebbWebsocketOnly: false
  nodebbWebsocketOnly: false
  mongoHost: mongo
  mongoPort: 27017
  mongoUsername:
  mongoPassword:
  mongoDatabase:
  adminUsername: admin
  adminPassword: adminsupersecurepassword
  adminEmail: admin@example.com
  ssmtpDomain: example.com
  ssmtpEmail: forum@example.com
  ssmtpHost: mail.example.net
  ssmtpPort: 587
  ssmtpPassword: smtpsupersecurepassword
  awsAccessKey:       # Optional
  awsSecretAccessKey: # Optional
  S3UploadsBucket:    # Optional 
  S3UploadsHost:      # Optional

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

## enable mongo as helm dependency
mongo:
  enabled: true
mongodb:
  # Enable authentication
  ## ref: https://docs.mongodb.com/manual/tutorial/enable-authentication/
  #
  usePassword: true
  # existingSecret: name-of-existing-secret

  ## MongoDB admin password
  ## ref: https://github.com/bitnami/bitnami-docker-mongodb/blob/master/README.md#setting-the-root-password-on-first-run
  ##
  mongodbRootPassword: superrootpassword

  ## MongoDB custom user and database
  ## ref: https://github.com/bitnami/bitnami-docker-mongodb/blob/master/README.md#creating-a-user-and-database-on-first-run
  ##
  mongodbUsername: mongo
  mongodbPassword: mongopass
  mongodbDatabase: nodebb
  ## Enable persistence using Persistent Volume Claims
  ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    enabled: false
    ## A manually managed Persistent Volume and Claim
    ## Requires persistence.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    # existingClaim:
    ## mongodb data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"
    accessModes:
      - ReadWriteOnce
    size: 8Gi
  annotations: {}
  service:
    type: ClusterIP
    port: 27017